{"ast":null,"code":"import _Number$parseInt from \"@babel/runtime-corejs2/core-js/number/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom'; // import classes from './slideshow.css';\n\nvar SlideShow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SlideShow, _Component);\n\n  function SlideShow(props) {\n    var _this;\n\n    _classCallCheck(this, SlideShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SlideShow).call(this, props));\n    _this.state = {\n      slideIndex: 0\n    };\n\n    var ratioWHArray = _this.props.ratio.split(\":\");\n\n    _this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\n    _this.backward = _this.backward.bind(_assertThisInitialized(_this));\n    _this.forward = _this.forward.bind(_assertThisInitialized(_this));\n    _this.setSlideIndex = _this.setSlideIndex.bind(_assertThisInitialized(_this));\n    _this.getNewSlideIndex = _this.getNewSlideIndex.bind(_assertThisInitialized(_this));\n    _this.updateDimensions = _this.updateDimensions.bind(_assertThisInitialized(_this));\n    _this.runAutomatic = _this.runAutomatic.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SlideShow, [{\n    key: \"getNewSlideIndex\",\n    value: function getNewSlideIndex(step) {\n      var slideIndex = this.state.slideIndex;\n      var numberSlide = this.props.input.length;\n      var newSlideIndex = slideIndex + step;\n      if (newSlideIndex >= numberSlide) newSlideIndex = 0;else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\n      return newSlideIndex;\n    }\n  }, {\n    key: \"backward\",\n    value: function backward() {\n      this.setState({\n        slideIndex: this.getNewSlideIndex(-1)\n      });\n    }\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      this.setState({\n        slideIndex: this.getNewSlideIndex(1)\n      });\n    }\n  }, {\n    key: \"setSlideIndex\",\n    value: function setSlideIndex(index) {\n      this.setState({\n        slideIndex: index\n      });\n    }\n  }, {\n    key: \"updateDimensions\",\n    value: function updateDimensions() {\n      this.containerElm.style.height = \"\".concat(this.containerElm.offsetWidth / this.ratioWH, \"px\");\n    }\n  }, {\n    key: \"runAutomatic\",\n    value: function runAutomatic() {\n      this.setState({\n        slideIndex: this.getNewSlideIndex(1)\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.rootElm = ReactDOM.findDOMNode(this);\n      this.containerElm = this.rootElm.querySelector(\".container\");\n      this.updateDimensions();\n      window.addEventListener(\"resize\", this.updateDimensions);\n\n      if (this.props.mode === \"automatic\") {\n        var timeout = this.props.timeout || 5000;\n        this.automaticInterval = setInterval(function () {\n          return _this2.runAutomatic();\n        }, _Number$parseInt(timeout));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.updateDimensions);\n      if (this.automaticInterval) clearInterval(this.automaticInterval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"lp-slideshow\"\n      }, React.createElement(\"div\", {\n        className: \"container\"\n      }, this.props.input.map(function (image, index) {\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"slide \".concat(_this3.state.slideIndex === index ? \"active\" : \"\")\n        }, React.createElement(\"div\", {\n          className: \"number-text\"\n        }, \"\".concat(index + 1, \" / \").concat(_this3.props.input.length)), React.createElement(\"img\", {\n          className: \"image\",\n          src: image.src,\n          alt: image.caption\n        }), React.createElement(\"div\", {\n          className: \"caption-text\"\n        }, image.caption));\n      }), React.createElement(\"span\", {\n        className: \"prev\",\n        onClick: this.backward\n      }, \"\\u276E\"), React.createElement(\"span\", {\n        className: \"next\",\n        onClick: this.forward\n      }, \"\\u276F\")), React.createElement(\"div\", {\n        className: \"dot-container\"\n      }, this.props.input.map(function (_, index) {\n        return React.createElement(\"span\", {\n          key: index,\n          className: \"dot \".concat(_this3.state.slideIndex === index ? \"active\" : \"\"),\n          onClick: function onClick() {\n            return _this3.setSlideIndex(index);\n          }\n        });\n      })));\n    }\n  }]);\n\n  return SlideShow;\n}(Component);\n\nexport default SlideShow;","map":null,"metadata":{},"sourceType":"module"}