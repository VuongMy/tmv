{"ast":null,"code":"import _Number$parseInt from \"@babel/runtime-corejs2/core-js/number/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"c:\\\\Users\\\\Administrator.GHYMYV3HTEDFYTU\\\\Desktop\\\\myvt\\\\12012020\\\\tmv-master\\\\components\\\\introduce\\\\SlideShow.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom'; // import classes from './slideshow.css';\n\nvar SlideShow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SlideShow, _Component);\n\n  function SlideShow(props) {\n    var _this;\n\n    _classCallCheck(this, SlideShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SlideShow).call(this, props));\n    _this.state = {\n      slideIndex: 0\n    };\n\n    var ratioWHArray = _this.props.ratio.split(\":\");\n\n    _this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\n    _this.backward = _this.backward.bind(_assertThisInitialized(_this));\n    _this.forward = _this.forward.bind(_assertThisInitialized(_this));\n    _this.setSlideIndex = _this.setSlideIndex.bind(_assertThisInitialized(_this));\n    _this.getNewSlideIndex = _this.getNewSlideIndex.bind(_assertThisInitialized(_this));\n    _this.updateDimensions = _this.updateDimensions.bind(_assertThisInitialized(_this));\n    _this.runAutomatic = _this.runAutomatic.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SlideShow, [{\n    key: \"getNewSlideIndex\",\n    value: function getNewSlideIndex(step) {\n      var slideIndex = this.state.slideIndex;\n      var numberSlide = this.props.input.length;\n      var newSlideIndex = slideIndex + step;\n      if (newSlideIndex >= numberSlide) newSlideIndex = 0;else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\n      return newSlideIndex;\n    }\n  }, {\n    key: \"backward\",\n    value: function backward() {\n      this.setState({\n        slideIndex: this.getNewSlideIndex(-1)\n      });\n    }\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      this.setState({\n        slideIndex: this.getNewSlideIndex(1)\n      });\n    }\n  }, {\n    key: \"setSlideIndex\",\n    value: function setSlideIndex(index) {\n      this.setState({\n        slideIndex: index\n      });\n    }\n  }, {\n    key: \"updateDimensions\",\n    value: function updateDimensions() {\n      this.containerElm.style.height = \"\".concat(this.containerElm.offsetWidth / this.ratioWH, \"px\");\n    }\n  }, {\n    key: \"runAutomatic\",\n    value: function runAutomatic() {\n      this.setState({\n        slideIndex: this.getNewSlideIndex(1)\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.rootElm = ReactDOM.findDOMNode(this);\n      this.containerElm = this.rootElm.querySelector(\".container\");\n      this.updateDimensions();\n      window.addEventListener(\"resize\", this.updateDimensions);\n\n      if (this.props.mode === \"automatic\") {\n        var timeout = this.props.timeout || 5000;\n        this.automaticInterval = setInterval(function () {\n          return _this2.runAutomatic();\n        }, _Number$parseInt(timeout));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.updateDimensions);\n      if (this.automaticInterval) clearInterval(this.automaticInterval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"lp-slideshow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.props.input.map(function (image, index) {\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"slide \".concat(_this3.state.slideIndex === index ? \"active\" : \"\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"number-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \"\".concat(index + 1, \" / \").concat(_this3.props.input.length)), React.createElement(\"img\", {\n          className: \"image\",\n          src: image.src,\n          alt: image.caption,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"caption-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, image.caption));\n      }), React.createElement(\"span\", {\n        className: \"prev\",\n        onClick: this.backward,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"\\u276E\"), React.createElement(\"span\", {\n        className: \"next\",\n        onClick: this.forward,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"\\u276F\")), React.createElement(\"div\", {\n        className: \"dot-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, this.props.input.map(function (_, index) {\n        return React.createElement(\"span\", {\n          key: index,\n          className: \"dot \".concat(_this3.state.slideIndex === index ? \"active\" : \"\"),\n          onClick: function onClick() {\n            return _this3.setSlideIndex(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return SlideShow;\n}(Component);\n\nexport default SlideShow;","map":{"version":3,"sources":["c:\\Users\\Administrator.GHYMYV3HTEDFYTU\\Desktop\\myvt\\12012020\\tmv-master\\components\\introduce\\SlideShow.js"],"names":["React","Component","ReactDOM","SlideShow","props","state","slideIndex","ratioWHArray","ratio","split","ratioWH","backward","bind","forward","setSlideIndex","getNewSlideIndex","updateDimensions","runAutomatic","step","numberSlide","input","length","newSlideIndex","setState","index","containerElm","style","height","offsetWidth","rootElm","findDOMNode","querySelector","window","addEventListener","mode","timeout","automaticInterval","setInterval","removeEventListener","clearInterval","map","image","src","caption","_"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n// import classes from './slideshow.css';\n\nclass SlideShow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            slideIndex: 0\n        };\n\n        const ratioWHArray = this.props.ratio.split(\":\");\n        this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\n\n        this.backward = this.backward.bind(this);\n        this.forward = this.forward.bind(this);\n        this.setSlideIndex = this.setSlideIndex.bind(this);\n        this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\n        this.updateDimensions = this.updateDimensions.bind(this);\n        this.runAutomatic = this.runAutomatic.bind(this);\n    }\n\n    getNewSlideIndex(step) {\n        const slideIndex = this.state.slideIndex;\n        const numberSlide = this.props.input.length;\n\n        let newSlideIndex = slideIndex + step;\n\n        if (newSlideIndex >= numberSlide) newSlideIndex = 0;\n        else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\n\n        return newSlideIndex;\n    }\n\n    backward() {\n        this.setState({\n            slideIndex: this.getNewSlideIndex(-1)\n        });\n    }\n\n    \n    forward() {\n        this.setState({\n            slideIndex: this.getNewSlideIndex(1)\n        });\n    }\n\n    setSlideIndex(index) {\n        this.setState({\n            slideIndex: index\n        })\n    }\n\n   \n    updateDimensions() {\n        this.containerElm.style.height\n            = `${this.containerElm.offsetWidth / this.ratioWH}px`;\n    }\n\n    \n    runAutomatic() {\n        this.setState({\n            slideIndex: this.getNewSlideIndex(1)\n        });\n    }\n\n   \n    componentDidMount() {\n        this.rootElm = ReactDOM.findDOMNode(this);\n        this.containerElm = this.rootElm.querySelector(\".container\");\n\n        this.updateDimensions();\n        window.addEventListener(\"resize\", this.updateDimensions);\n\n        if (this.props.mode === \"automatic\") {\n            const timeout = this.props.timeout || 5000;\n\n            this.automaticInterval = setInterval(\n                () => this.runAutomatic(),\n                Number.parseInt(timeout)\n            );\n        }\n    }\n\n    \n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n        if (this.automaticInterval) clearInterval(this.automaticInterval);\n    }\n\n    \n    render() {\n        return (\n            <div className=\"lp-slideshow\">\n                <div className=\"container\">\n                    {\n                        this.props.input.map((image, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    className={\n                                        `slide ${this.state.slideIndex === index ? \"active\" : \"\"}`\n                                    }\n                                >\n                                    <div className=\"number-text\">\n                                        {`${index + 1} / ${this.props.input.length}`}\n                                    </div>\n                                    <img className=\"image\" src={image.src} alt={image.caption} />\n                                    <div className=\"caption-text\">{image.caption}</div>\n                                </div>\n                            )\n                        })\n                    }\n\n                    <span className=\"prev\" onClick={this.backward}>❮</span>\n                    <span className=\"next\" onClick={this.forward}>❯</span>\n                </div>\n\n                <div className=\"dot-container\">\n                    {\n                        this.props.input.map((_, index) => {\n                            return (\n                                <span\n                                    key={index}\n                                    className={\n                                        `dot ${this.state.slideIndex === index ? \"active\" : \"\"}`\n                                    }\n                                    onClick={() => this.setSlideIndex(index)}\n                                >\n                                </span>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SlideShow;"]},"metadata":{},"sourceType":"module"}